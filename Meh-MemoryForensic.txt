A to Z on evidence discovery not necessarily in order of execution

1) Prepare Evidence
   Locally mount a working copy of images RO
   Gather hashes and compare to hash db's
   Extract exe/dll from unallocated space
2) Check what AV is installed and its logs.
   Run multiple AV against extracted files
3) Indicators of Compromise Search
     Run yara scan and sort by number of findings per file
     Scan for known hashes, IP's, URL's
4) Automated Memory Analysis - malfind
5) Evidence of Persistence
   Scheduled tasks
   Service replacements / creations
   auto-start registry (autoruns)
   DLL search order hijacks
   Trojaned legit sys libraries
5) File integrity - Authenticode signature scan
6) Packing / Entropy Checks
   Scan for indication of packing and test entropy
   Compare PE header compile time versus created/modified timestamp 
7) Super Timeline with analyzeMFT and log2timeline
   See if above malfind candidates appear
   MFT anomolies for file creation sequences
8) Manual Memory Analysis with Volatility
   Too many to individually list
   Analyze hibernation file
9) Review event logs
   Sluthkit scrape if missing or emptied
   regripper with plugins
10) Examine Volume Shadow copies deltas  
11) Services - System/Enum/Root/LEGACY_* First use, 0000=Most recent use
12) File Analysis  
    a) MFT: compare dates within to check tampering. 
            data fields contain resident files up to 744b in length. Hex dump data record  
    b) Recycle Bin: date in index reflects delete date  
    c) Prefetch: Not enabled by default on server OS's. \Windows\Prefetch\Appname-Hash.pf  
    d) Scheduled Tasks: 2003- C:\Windows\Tasks. Vista+ C:\Windows\System32\Tasks  
       at.exe, schtasks.exe
    e) Jump List: Win7, Win8; AppData\Roaming\Microsoft\Windows\Recent\AutomaticDestinations,CustomDestinations(pinned)
    f) Error reporting WER - C:\ProgramData\Microsoft\Windows\WER  
    g) Anti-virus logs
         MSRT: Check date of last update + positives. \Windows\Debug\mrt.log
         Defender: C:\ProgramData\Microsoft\Windows Defender\Support  
    h) Registry written shimcache
13) Registry Data Pull
    a) USB Drives, Applications, File Extension Associations, WordWheelQuery/RecentDocs, Network usage, Shellbags, 
       MUICache, Menulists, UserAssist, TypedPath
    b) Consider finding deltas from historic registry copies: "RegBack" and Volume Shadow Copies 
14) Parse internet activities
14) MBR mmls scraping for non-zero values before the first partition  
  
USB key forensics
TZWorks has a tool listed in ToolsOfTheGame on this github, but other details albeit old found here:
    http://blogs.sans.org/computer-forensics/files/2009/09/USBKEY-Guide.pdf
    Use System Event log for UserMode/Operational Event to correlate USB activity
    If no S/N is baked into usb, OS assigns one with "&" as 2nd char

Investigation for Malware methodology
1) Identify Rogue Processes
2) Analyze process DLL's and handles
3) Review network artifacts
4) Look for evidence of code injection
5) Check for signs of a rootkit
6) Dump suspicious processes and drivers

Malware Infection Cycle
1) Block initial exploits based on IOC signatures
2) Detect payloads and unknown exploits in mail, web, or file transfer
3) Block network callbacks and data exfiltration
4) Block lateral spread through network shares scanning

APT Phases
1) Reconnaissance - target using social media for personalization
2) Intrusion - Spear Phishing, purchased from attacker, watering hole attacks (infect common site)
3) Infection - backdoor, maybe use dropper, begin gathering info
4) Credential Theft
5) Lateral Movement - Use stolen credentials, network shares, or internal email, can shift attention
6) Data Exfiltration
7) Persistence - repeated credential exfiltration, contin update tools, work outside bus hours, target strategic machines

Malware types
Downloaders/droppers
Rogue utility and security products
Trojans, RATs : Zeus, SpyEye, Citadel, GhostRAT, poison ivy, SpyNet
Rootkit - stealthy, Trojan func, may damage, requires reinstalling, can exist in MBR. TDL/TDSS, ZeroAccess, Stuxnet
Viruses - infect other binaries or boot sectors, requires reinstalling,  Sality, Virut
Worms - spread using exploits, USB drives, email, shares. Reinstall systems

Incidence Response Process - live forensics
1) Preparation: Be ready with the tools and training for incidents before they happen.
2) Identification: Identify incidents thoroughly; going through the IR process only to find a false alarm is no fun.
3) Containment: Contain the incident to prevent possible collateral damage. eg. revoking user accounts, blocking access at FW, or updating AV rules
4) Eradication: Get rid of the malicious code, unauthorized account, or bad employee that caused the incident.
5) Recovery: Make sure the system meets company standards before returning it to service. Continue monitoring for any aberrant behavior
6) Lessons Learned

# Lenny Zeltser tips

Analyzing a windows executable for Malware
pescanner .exe or .dll
  ssdeep fuzzy hash, md5 hash
  checks packers which gives weight to suspicion
  clamav
  IAT alerts - Import Address Table - Look at external functions run
  Sections - Entropy checked for randomness. High entropy might have packed contents
  Signature scans - YARA
  Resource Entries - can show other languages used to make it

pyew to inspect malware
  built-in hex viewer
  pyew.imports shows commands it runs
  url extracts urls
  threat computes hash and queries it in threatexpert.com

xorsearch -s .dll http: or https:
  brute forces run byte long key values
  research resulting urls 
  Run produces *.05 containing all strings to view

Exploring infection in a network capture
  NetworkMiner pcap_file
    Parses traffic and saves files into local file
  jsunpackn.py -v -g image.png -s pcap_file
    deobfuscates JS and saves files from pcap

Examine malicious document/media files
  pdfid file.pdf
    Unusual to have JavaScript.  RichMedia could be for flash embedment
    Launch can run remote programs.

  pdfextract file.pdf
    Extracts JS under dump/scripts. 
    Payload could contain unicode. 
    cat unicode.txt | unicode2hex-escaped | shellcode2exe
    Examine resulting exe

  swf_mastah -o ./ -f file.pdf
    Extracts flash from pdf

  swfdump -Ddu file.swf

  xxxswf.py -xd file.doc
    Extracts Flash from most formats

#############################################################
Behavioral Analysis - mold test envir to mimic infected one.
#############################################################
Add svcs to witness malware effects
-Execute in isolated environment
-Observe how it interacts with FS, registry, network
  Regshot monitors registry changes using snapshots
  Process Monitor filters by app to show events/registry changes
  CaptureThat [-c] capture files [-n] network
    Tries to hide normal windows activity
    Creates zip of results.
  FakeDNS shows queries executed to localhost
  Mailpot is an email honeypot

*Code Analysis
OllyDbg on .exe
  Run: Search for all referenced text strings
  See what runs where that string is referenced in disassembler
  Memory Access Breakpoints
  Load app, hit run, alt-m for memory map. Binary search ctrl-b, 
    search for string and see results.  ctrl-l repeats search.
    Highlight string in disassembly. Dropdown, Breakpoint memory on access.
    Step into per step and view assembly

--Preparation in advance--

IOC repo collection
Hash repo if offline is required
Tools thumbdrive/DVD and sterilized storage

--Items run on a Windows OS--

Memory image capture (online)
Disk image capture (offline)
FTK for application artifacts (offline)

--Items run on a Linux OS offline--

Volatility shotgun - check for common scenarios
  Create pstree -v output
  Create/Check schtasks module output
  Create/sort shimcachemem by date
  Check malfind processes
  Check for services without drivers
  Find processes with FALSE in psxview
  View cmdline/consoles for manual activity
  Check shellbags for MRU's
Run bulk_extractor to more quickly pull pcaps from images

Collected IOC scans: IP, URL, domain, scraped hashes 

File scraping
  clamscan
  Pull logs based on running apps
  extract application logs
  Check for unsigned signatures of libraries
  missidentify to find renamed exe's
  Generate md5/fuzzy hashes for pre-examination
  Hash scans against VT or localized repo
  Entropy checks
  Check for suspicious remote sites in netscan

Deobfuscation techniques (when to use)
Java analysis
Javascript analysis

Test against strings

Analyze Windows metadata (hachoir / exif dump)
  Does FTK do this well since you use it already?

Document Analysis (pdf, Office, etc)

Unpacking PE/DLL
Dynamic malware analysis
Static malware analysis

-- pcap analysis --

Trim to include only suspect IP to start
Networkminer to quick look at binaries
Scan any upfront suspicious binaries
Analyze sessions and theorize based on traffic protocols and contents
Check http for malicious JS routines looking for encoded routines
Shellcode analysis
Attempt SSL decode for encrypted traffic?
Locate external actors
